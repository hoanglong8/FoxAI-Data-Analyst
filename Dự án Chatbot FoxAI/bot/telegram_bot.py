import telebot
from models.GEMINI import configure_gemini, get_gemini_response
from models.OPENAI import configure_openai, get_openai_response
from models.DEEPSEEK import configure_deepseek, get_deepseek_response
import os
from dotenv import load_dotenv

# N·∫°p c√°c bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# L·∫•y API key t·ª´ c√°c bi·∫øn m√¥i tr∆∞·ªùng
telegram_token = os.getenv("TELEGRAM_TOKEN")
gemini_token = os.getenv("GEMINI_TOKEN")
openai_api_key = os.getenv("OPEN_AI_TOKEN")
deepseek_token = os.getenv("DEEPSEEK_TOKEN")

# Kh·ªüi t·∫°o bot Telegram
bot = telebot.TeleBot(telegram_token)

# Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c
current_model = None
user_states = {}  # D√πng ƒë·ªÉ l∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng (ƒë√£ ch·ªçn m√¥ h√¨nh hay ch∆∞a)

# C·∫•u h√¨nh c√°c m√¥ h√¨nh
gemini_model = configure_gemini(gemini_token)
openai_client = configure_openai(openai_api_key)
deepseek_client = configure_deepseek(deepseek_token)

# L∆∞u tr·ªØ cu·ªôc tr√≤ chuy·ªán ng∆∞·ªùi d√πng
openai_conversations = {}

# T·∫°o b·∫£ng ch√†o m·ª´ng v√† b√†n ph√≠m Inline ƒë·ªÉ l·ª±a ch·ªçn m√¥ h√¨nh
def send_welcome(message):
    welcome_message = (
        "üåü **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot ph√¢n t√≠ch th√¥ng minh!** üåü\n\n"
        "Ch√∫ng t√¥i h·ªó tr·ª£ 3 m√¥ h√¨nh AI m·∫°nh m·∫Ω ƒë·ªÉ b·∫°n l·ª±a ch·ªçn:\n"
        "- **Gemini**: Ph√¢n t√≠ch d·ªØ li·ªáu v√† t·∫°o ph·∫£n h·ªìi th√¥ng minh.\n"
        "- **OpenAI**: T·∫°o ra c√°c ph·∫£n h·ªìi s√°ng t·∫°o t·ª´ c√°c m√¥ h√¨nh m·∫°nh m·∫Ω nh·∫•t.\n"
        "- **DeepSeek**: Ph√¢n t√≠ch v√† gi·∫£i th√≠ch c√°c n·ªôi dung ph·ª©c t·∫°p.\n\n"
        "üëâ **C√°ch s·ª≠ d·ª•ng bot**:\n"
        "1. **Ch·ªçn m√¥ h√¨nh AI**: B·∫•m v√†o m·ªôt trong ba n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ ch·ªçn m√¥ h√¨nh b·∫°n mu·ªën s·ª≠ d·ª•ng.\n"
        "2. **G·ª≠i tin nh·∫Øn**: B·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn vƒÉn b·∫£n ho·∫∑c h√¨nh ·∫£nh cho bot.\n"
        "3. **Nh·∫≠n ph·∫£n h·ªìi**: Bot s·∫Ω tr·∫£ l·ªùi c√¢u h·ªèi ho·∫∑c ph√¢n t√≠ch ·∫£nh b·∫°n g·ª≠i.\n\n"
        "üîÑ **L·ªánh /reset**: N·∫øu b·∫°n mu·ªën ch·ªçn l·∫°i m√¥ h√¨nh, b·∫•m **/reset** ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.\n"
        "üìù **V√≠ d·ª•**: B·∫°n c√≥ th·ªÉ h·ªèi bot nh·ªØng c√¢u h·ªèi nh∆∞ 'Ng√†y h√¥m nay th·∫ø n√†o?' ho·∫∑c g·ª≠i m·ªôt b·ª©c ·∫£nh v√† y√™u c·∫ßu bot ph√¢n t√≠ch n√≥.\n\n"
        "Ch√∫c b·∫°n c√≥ m·ªôt tr·∫£i nghi·ªám th√∫ v·ªã! üéâ"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    item1 = telebot.types.InlineKeyboardButton("Gemini", callback_data='Gemini')
    item2 = telebot.types.InlineKeyboardButton("OpenAI", callback_data='OpenAi')
    item3 = telebot.types.InlineKeyboardButton("DeepSeek", callback_data='Deepseek')
    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, welcome_message, reply_markup=markup)

# X·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    global current_model  # ƒê·∫£m b·∫£o s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    user_id = call.from_user.id
    if call.data == 'Gemini':
        bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn Gemini!")
        current_model = "gemini"  # C·∫≠p nh·∫≠t ch√≠nh x√°c t√™n m√¥ h√¨nh
    elif call.data == 'OpenAi':
        bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn OpenAI!")
        current_model = "openai"  # C·∫≠p nh·∫≠t ch√≠nh x√°c t√™n m√¥ h√¨nh
    elif call.data == 'Deepseek':
        bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn DeepSeek!")
        current_model = "deepseek"  # C·∫≠p nh·∫≠t ch√≠nh x√°c t√™n m√¥ h√¨nh
    
    user_states[call.from_user.id] = current_model  # L∆∞u l·∫°i tr·∫°ng th√°i ng∆∞·ªùi d√πng (ƒë√£ ch·ªçn m√¥ h√¨nh)
    bot.send_message(call.message.chat.id, f"ƒêang s·ª≠ d·ª•ng m√¥ h√¨nh: {current_model}")

# L·ªánh reset: Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn l·∫°i m√¥ h√¨nh
@bot.message_handler(commands=['reset'])
def reset(message):
    user_id = message.from_user.id
    user_states[user_id] = None  # ƒê·∫∑t l·∫°i tr·∫°ng th√°i ng∆∞·ªùi d√πng
    bot.send_message(message.chat.id, "M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i. H√£y ch·ªçn l·∫°i m√¥ h√¨nh b·∫°n mu·ªën s·ª≠ d·ª•ng.")
    send_welcome(message)  # G·ª≠i b·∫£ng ch√†o m·ª´ng ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn l·∫°i m√¥ h√¨nh

# X·ª≠ l√Ω tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√† hi·ªÉn th·ªã b·∫£ng ch√†o m·ª´ng (n·∫øu ch∆∞a ch·ªçn m√¥ h√¨nh)
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global current_model  # ƒê·∫£m b·∫£o s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    user_message = message.text
    user_id = message.from_user.id
    print(f"Tin nh·∫Øn ng∆∞·ªùi d√πng {user_id}: {user_message}")
    
    # G·ª≠i b·∫£ng ch√†o m·ª´ng ngay khi ng∆∞·ªùi d√πng g·ª≠i b·∫•t k·ª≥ tin nh·∫Øn n√†o n·∫øu ch∆∞a ch·ªçn m√¥ h√¨nh
    if user_id not in user_states or user_states[user_id] is None:
        send_welcome(message)  # G·ª≠i b·∫£ng ch√†o m·ª´ng
        return  # D·ª´ng l·∫°i v√† ch·ªù ng∆∞·ªùi d√πng ch·ªçn m√¥ h√¨nh
    
    # L·∫•y ph·∫£n h·ªìi t·ª´ m√¥ h√¨nh ƒë√£ ch·ªçn
    if current_model == "gemini":
        response = get_gemini_response(gemini_model, user_message)
    elif current_model == "openai":
        response = get_openai_response(openai_client, user_id, user_message, openai_conversations)
    elif current_model == "deepseek":
        response = get_deepseek_response(deepseek_client, user_message)
    else:
        response = "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω m√¥ h√¨nh."
    
    # Ki·ªÉm tra xem response c√≥ tr·ªëng kh√¥ng
    if not response.strip():  # N·∫øu response l√† chu·ªói tr·ªëng ho·∫∑c ch·ªâ ch·ª©a kho·∫£ng tr·∫Øng
        response = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. H√£y th·ª≠ l·∫°i v·ªõi m·ªôt c√¢u h·ªèi kh√°c."

    # Ki·ªÉm tra n·∫øu response v·∫´n tr·ªëng, tr√°nh g·ª≠i tin nh·∫Øn tr·ªëng
    if response:
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "C√≥ l·ªói trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.")

# B·∫Øt ƒë·∫ßu ch·∫°y bot
bot.infinity_polling()